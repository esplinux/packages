llvmVersion = "10.0.0"
pythonVersion = "3.8"
yaccVersion = "1.9"

llvmSourceBase = "https://github.com/llvm/llvm-project/releases/download/llvmorg-%s" % llvmVersion
llvmSourceURL = llvmSourceBase + "/llvm-%s.src.tar.xz" % llvmVersion
clangSourceURL = llvmSourceBase + "/clang-%s.src.tar.xz" % llvmVersion
lldSourceURL = llvmSourceBase + "/lld-%s.src.tar.xz" % llvmVersion

yaccSource = "https://invisible-mirror.net/archives/byacc/byacc-20200330.tgz"

pythonSource = "https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tar.xz"

def which(command):
  return shell("which " + command + " | cat", quiet=True).strip(" \n")

def whichVersion(command, version, flag="--version"):
  commandPath = which(command)
  if commandPath != "":
    if version in shell(commandPath + " " + flag, quiet=True):
      return commandPath
  return ""

def hostCMake(source):
    hostSource = source + "-host"
    shell("mv " + source + " " + hostSource)
    return cmake(hostSource)

def hostAutomake(source, options="--prefix=''"):
    hostSource = source + "-host"
    shell("mv " + source + " " + hostSource)
    return automake(hostSource, options)


def llvm():
  hostLLVM = whichVersion("llvm-config", llvmVersion)
  hostADDR2LINE = which("llvm-addr2line")
  hostAR = which("llvm-ar")
  hostNM = which("llvm-nm")
  hostOBJCOPY = which("llvm-objcopy")
  hostOBJDUMP = which("llvm-objdump")
  hostRANLIB= which("llvm-ranlib")
  hostREADELF = which("llvm-readelf")
  hostSTRIP = which("llvm-strip")
  if (hostLLVM != "") and (hostAR != ""):
    return (hostADDR2LINE, hostAR, hostNM, hostOBJCOPY, hostOBJDUMP, hostRANLIB, hostREADELF, hostSTRIP)
  else:
    hostLLVMOut = hostCMake( fetch(llvmSourceURL) )
    return (
      hostLLVMOut + "/bin/llvm-addr2line",
      hostLLVMOut + "/bin/llvm-ar",
      hostLLVMOut + "/bin/llvm-nm",
      hostLLVMOut + "/bin/llvm-objcopy",
      hostLLVMOut + "/bin/llvm-objdump",
      hostLLVMOut + "/bin/llvm-ranlib",
      hostLLVMOut + "/bin/llvm-readelf",
      hostLLVMOut + "/bin/llvm-strip",
    )

def clang():
  hostCC = whichVersion("clang", llvmVersion)
  hostCXX = whichVersion("clang++", llvmVersion)
  if (hostCC != "") and (hostCXX != ""):
    return (hostCC, hostCXX)
  else:
    hostClangOut = hostCMake( fetch(clangSourceURL) )
    return (
      hostClangOut + "/bin/clang", 
      hostClangOut + "/bin/clang++",
    )

def lld():
  hostLLD = which("lld")
  hostLD = whichVersion("ld.lld", llvmVersion)
  if hostLD != "":
    return (hostLLD, hostLD)
  else:
    hostLLDOut = hostCMake( fetch(lldSourceURL) )
    return (
      hostLLDOut + "/bin/lld", 
      hostLLDOut + "/bin/ld.lld",
    )

# Todo add check for btyacc (-B) support
def yacc():
  hostYacc = whichVersion("yacc", yaccVersion, "-V")
  if hostYacc != "":
    return hostYacc
  else:
    hostYaccOut = hostAutomake( fetch(yaccSource), "--prefix='' --enable-btyacc" )
    return hostYaccOut + "/bin/yacc"

def python():
  hostPython = whichVersion("python3", pythonVersion)
  if hostPython != "":
    return hostPython
  else:
    hostPythonOut = hostAutomake( fetch(pythonSource) )
    return hostPythonOut + "/bin/python3"

def go():
  hostGo = whichVersion("go", "1.14", "version")
  if hostGo != "":
    return hostGo
  else:
    print("Did not find suitable GoLang")

(hostADDR2LINE, hostAR, hostNM, hostOBJCOPY, hostOBJDUMP, hostRANLIB, hostREADELF, hostSTRIP) = llvm()
(hostCC, hostCXX)  = clang()
(hostLLD, hostLD)  = lld()
hostGo = go()

hostPYTHON = python()

hostYACC = yacc()

HOST = struct(
  addr2line  = hostADDR2LINE,
  ar         = hostAR,
  asm        = hostCC,
  cc         = hostCC,
  cxx        = hostCXX,
  ld         = hostLD,
  lld        = hostLLD,
  nm         = hostNM,
  objcopy    = hostOBJCOPY,
  objdump    = hostOBJDUMP,
  python     = hostPYTHON,
  ranlib     = hostRANLIB,
  readelf    = hostREADELF,
  strip      = hostSTRIP,
  yacc       = hostYACC,
)
