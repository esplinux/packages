name    = "libcxx"
version = "10.0.0"
rev     = "0"

abiSource = fetch("https://github.com/llvm/llvm-project/releases/download/llvmorg-%s/libcxxabi-%s.src.tar.xz" % (version, version))
source = fetch("https://github.com/llvm/llvm-project/releases/download/llvmorg-%s/libcxx-%s.src.tar.xz" % (version, version))

load("host.esp", "HOST")
load("libunwind.esp", "LIBUNWIND")

abiOut = cmake(abiSource, {
  "CMAKE_ADDR2LINE": HOST.addr2line,
  "CMAKE_AR": HOST.ar,
  "CMAKE_C_COMPILER": HOST.cc,
  "CMAKE_CXX_COMPILER": HOST.cxx,
  "CMAKE_LINKER": HOST.ld,
  "CMAKE_NM": HOST.nm,
  "CMAKE_OBJCOPY": HOST.objcopy,
  "CMAKE_OBJDUMP": HOST.objdump,
  "CMAKE_RANLIB": HOST.ranlib,
  "CMAKE_READELF": HOST.readelf,
  "CMAKE_STRIP": HOST.strip,
  "CMAKE_SHARED_LINKER_FLAGS": "-L" + LIBUNWIND.lib,
  "LLVM_ENABLE_EH": "ON",
  "LLVM_ENABLE_RTTI": "ON",
  "LIBCXXABI_USE_COMPILER_RT": "ON",
  "LIBCXXABI_USE_LLVM_UNWINDER": "ON",
  "LIBCXXABI_LIBCXX_PATH": source,
  "LIBCXXABI_LIBUNWIND_INCLUDES": LIBUNWIND.include,
})

LIBCXXABI = struct(
  name    = "libcxxabi", 
  version = version, 
  rev     = rev,
  package = tarball(abiOut, "libcxxabi", version, rev),
  lib     = abiOut + "/lib",
  include = abiSource + "/include",
)

out = cmake(source, {
  "CMAKE_ADDR2LINE": HOST.addr2line,
  "CMAKE_AR": HOST.ar,
  "CMAKE_C_COMPILER": HOST.cc,
  "CMAKE_CXX_COMPILER": HOST.cxx,
  "CMAKE_LINKER": HOST.ld,
  "CMAKE_NM": HOST.nm,
  "CMAKE_OBJCOPY": HOST.objcopy,
  "CMAKE_OBJDUMP": HOST.objdump,
  "CMAKE_RANLIB": HOST.ranlib,
  "CMAKE_READELF": HOST.readelf,
  "CMAKE_STRIP": HOST.strip,
  "CMAKE_SHARED_LINKER_FLAGS": "-L" + LIBUNWIND.lib,
  "LLVM_ENABLE_EH": "ON",
  "LLVM_ENABLE_RTTI": "ON",
  "LIBCXX_CXX_ABI": "libcxxabi",
  "LIBCXX_CXX_ABI_INCLUDE_PATHS": LIBCXXABI.include,
  "LIBCXX_CXX_ABI_LIBRARY_PATH": LIBCXXABI.lib,
  "LIBCXX_HAS_MUSL_LIBC": "ON",
  "LIBCXX_USE_COMPILER_RT": "ON",
})

LIBCXX = struct(
  name    = "libcxx", 
  version = version, 
  rev     = rev,
  package = tarball(out, "libcxx", version, rev),
  lib     = out + "/lib",
  include = out + "/include",
)

